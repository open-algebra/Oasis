# ##############################################################################
# OASIS: Open Algebra Software for Inferring Solutions
#
# cmake-multi-platform.yml
# ##############################################################################

name: CMake on multiple platforms

on:
    push:
        branches: [ "master" ]
    pull_request:
        branches: [ "master" ]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    build_and_test:
        runs-on: ${{ matrix.os }}

        strategy:
            # Sets fail-fast to false to ensure that feedback is delivered for all platforms.
            fail-fast: false

            matrix:
                os: [ ubuntu-latest, windows-latest ]
                build_type: [ Release, Debug ]
                c_compiler: [ gcc-12, clang-17, cl ]

                include:
                  - os: ubuntu-latest
                    c_compiler: gcc-12
                    cpp_compiler: g++
                  - os: ubuntu-latest
                    c_compiler: clang-17
                    cpp_compiler: clang++-17
                    build_profiling: true
                  - os: windows-latest
                    c_compiler: cl
                    cpp_compiler: cl
                exclude:
                  - os: ubuntu-latest
                    c_compiler: cl
                  - os: windows-latest
                    c_compiler: clang-17
                  - os: windows-latest
                    c_compiler: gcc-12
        steps:
            # Checks out the repository.
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Set reusable strings
            id: strings
            shell: bash
            run: |
              echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
              echo "coverage-dir=${{ github.workspace }}/coverage" >> "$GITHUB_OUTPUT"
              echo "pr-dir=${{ github.workspace }}/pr" >> "$GITHUB_OUTPUT"

            # Saves the PR number to use in writing a comment on the PR.
          - name: Save PR number
            run: |
              mkdir -p ${{ steps.strings.outputs.pr-dir }}
              echo "${{ github.event.number }}" > ${{ steps.strings.outputs.pr-dir }}/issue_number

            # Installs LLVM 17 on the Ubuntu runner.
          - name: Install LLVM 17
            if: ${{ matrix.c_compiler == 'clang-17' }}
            run: |
                wget https://apt.llvm.org/llvm.sh
                chmod +x llvm.sh
                sudo ./llvm.sh 17

          - name: Install GCC 12
            if: ${{ matrix.c_compiler == 'gcc-12' }}
            run: |
              sudo apt-get update
              sudo apt-get install -y gcc-12

          - name: Install Valgrind
            if: ${{ matrix.os == 'ubuntu-latest' }}
            run: |
              sudo apt-get update && sudo apt install libc6-dbg
              wget https://sourceware.org/pub/valgrind/valgrind-3.23.0.tar.bz2
              tar -xf valgrind-3.23.0.tar.bz2
              rm valgrind-3.23.0.tar.bz2
              cd valgrind-*
              ./configure --prefix=${{ github.workspace }}/valgrind
              make
              make install

            # Configures CMake in a subdirectory.
          - name: Configure CMake
            run: >
                cmake
                -B ${{ steps.strings.outputs.build-dir }}
                -S ${{ github.workspace }}
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                -DOASIS_BUILD_IO=ON
                -DOASIS_BUILD_WITH_COVERAGE=${{ matrix.build_profiling == true && 'ON' || 'OFF'}}
                -DOASIS_BUILD_PARANOID=ON

            # Builds Oasis with the given configuration.
          - name: Build Oasis
            run: >
                cmake
                --build ${{ steps.strings.outputs.build-dir }}
                --config ${{ matrix.build_type }}
                --target Oasis

            # Builds the tests for Oasis with the given configurations.
          - name: Build OasisTests
            run: >
                cmake
                --build ${{ steps.strings.outputs.build-dir }}
                --config ${{ matrix.build_type }}
                --target OasisTests

          - name: Build OasisIOTests
            run: >
                cmake
                --build ${{ steps.strings.outputs.build-dir }}
                --config Debug
                --target OasisIOTests

            # Runs the tests registered to CTest by CMake.
          - name: Test
            working-directory: ${{ steps.strings.outputs.build-dir }}
            run: ctest --build-config ${{ matrix.build_type }}

          - name: Collect Coverage
            if: ${{ matrix.build_profiling }}
            working-directory: ${{ steps.strings.outputs.build-dir }}
            run: >
              LLVM_PROFILE_FILE="${{ steps.strings.outputs.coverage-dir }}/oasis.profraw"
              ./tests/OasisTests

            # Creates reports from the coverage data.
          - name: Report Coverage
            if: ${{ matrix.build_profiling }}
            working-directory: ${{ steps.strings.outputs.coverage-dir }}
            shell: bash
            run: |
              llvm-profdata-17 merge -sparse oasis.profraw -o oasis.profdata
              llvm-cov-17 show -output-dir reports -instr-profile oasis.profdata ${{ steps.strings.outputs.build-dir }}/tests/OasisTests -sources ${{ github.workspace }}/src ${{ github.workspace }}/include

          - name: Memory Check
            if: ${{ matrix.os == 'ubuntu-latest' }}
            working-directory: ${{ steps.strings.outputs.build-dir }}
            run: >
              ${{ github.workspace }}/valgrind/bin/valgrind --leak-check=full --error-exitcode=1 ./tests/OasisTests

            # Uploads the build, test, and code coverage artifacts.
          - name: Upload artifacts
            if: ${{ matrix.build_profiling }}
            uses: actions/upload-artifact@v3
            with:
              name: build-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
              path: |
                ${{ steps.strings.outputs.build-dir }}
                !${{ steps.strings.outputs.build-dir }}/_deps
                ${{ steps.strings.outputs.coverage-dir }}

          - name: Upload PR number
            uses: actions/upload-artifact@v3
            with:
              name: pr-number
              path: ${{ steps.strings.outputs.pr-dir }}
